//add cart page + add "addcart" button, add "productpage" + add animation + add skeletons

//connect to mongo
import mongoose from "mongoose";

const MONGODB_URI = process.env.MONGODB_URI as string;

if (!MONGODB_URI) {
  throw new Error(
    "Please define the MONGODB_URI environment variable inside .env.local"
  );
}

let cachedConnection: typeof mongoose | null = null;

async function connectMongo() {
  if (cachedConnection) {
    return cachedConnection;
  }

  try {
    cachedConnection = await mongoose.connect(MONGODB_URI, {
      bufferCommands: false,
    });
    return cachedConnection;
  } catch (error) {
    console.log("Error connecting to MongoDB: ", error);
    throw error;
  }
}

export default connectMongo;

//cart
"use client";
import { useCart } from "@/Context/CartContext";
import Link from "next/link";
import { useState, useEffect } from "react";

const Cart = () => {
  const { cartItems } = useCart();
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    setTimeout(() => {
      setIsLoading(false);
    }, 2000);
  }, []);

  if (cartItems.length === 0 && !isLoading) {
    return (
      <div>
        <h1 className="text-center text-2xl font-bold text-gray-700">
          Your cart is empty.
        </h1>
        <div className="text-center mt-4">
          <Link href="/">
            <div className="bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-blue-600 transition-colors duration-300 font-bold transform hover:scale-105">
              Back to Home
            </div>
          </Link>
        </div>
      </div>
    );
  }
  const emptyCart = () => {
    localStorage.removeItem("cartItems");
  };

  return (
    <>
      <div className="min-h-screen bg-gradient-to-b from-gray-100 to-gray-900 p-8">
        <h1 className="text-4xl font-extrabold text-center mb-8 text-white bg-gradient-to-r from-gray-400 to-gray-700 p-4 rounded-lg">
          Your Cart
        </h1>
        <div className="space-y-6">
          {isLoading
            ? Array.from({ length: cartItems.length || 3 }).map((_, index) => (
                <div
                  key={index}
                  className="animate-pulse bg-gray-300 h-32 rounded-lg"
                />
              ))
            : cartItems.map((item) => (
                <div
                  key={item._id}
                  className="flex justify-between items-center p-6 bg-white shadow-xl rounded-lg transform transition-transform hover:scale-105"
                >
                  <div className="flex-1">
                    <img
                      src={item.images}
                      className="w-32 h-32 object-cover rounded-lg mr-4"
                    />
                    <h2 className="text-xl font-bold text-gray-700">
                      {item.name} - {item.price}€
                    </h2>
                    <p className="text-gray-600">
                      description:{item.description}
                    </p>
                    <p className="text-gray-600">category: {item.category}</p>
                  </div>
                </div>
              ))}
        </div>
        <div className="mt-8 text-center">
          <Link href="/">
            <div className="bg-white text-gray-700 px-6 py-3 rounded-lg shadow-lg hover:bg-gray-100 transition-colors duration-300 font-bold transform hover:scale-105">
              Back to Home
            </div>
          </Link>
        </div>
        <div className="mt-8 text-center">
          <button
            onClick={emptyCart}
            className="bg-white text-red-600 px-6 py-3 rounded-lg shadow-lg hover:bg-gray-100 transition-colors duration-300 font-bold transform hover:scale-105"
          >
            Empty Cart
          </button>
        </div>
      </div>
    </>
  );
};

export default Cart;

//cart contest

"use client";
import {
  createContext,
  ReactNode,
  useContext,
  useState,
  useEffect,
} from "react";
import { Item } from "@/app/page";

interface CartContextProps {
  cartItems: Item[];
  addItemToCart: (item: Item) => void;
  removeItemFromCart: (id: string) => void;
}

const CartContext = createContext<CartContextProps | undefined>(undefined);

export const CartProvider = ({ children }: { children: ReactNode }) => {
  const [cartItems, setCartItems] = useState<Item[]>(() => {
    // Recupera i dati dal localStorage, se esistono
    if (typeof window !== "undefined") {
      const savedCart = localStorage.getItem("cartItems");
      return savedCart ? JSON.parse(savedCart) : [];
    }
    return [];
  });

  useEffect(() => {
    // Aggiorna il localStorage quando il carrello cambia
    localStorage.setItem("cartItems", JSON.stringify(cartItems));
  }, [cartItems]);

  const addItemToCart = (item: Item) => {
    setCartItems((prevItems) => [...prevItems, item]);
  };

  const removeItemFromCart = (id: string) => {
    setCartItems((prevItems) => prevItems.filter((item) => item._id !== id));
  };

  return (
    <CartContext.Provider
      value={{ cartItems, addItemToCart, removeItemFromCart }}
    >
      {children}
    </CartContext.Provider>
  );
};

// Custom hook per utilizzare il contesto del carrello
export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error("useCart must be used within a CartProvider");
  }
  return context;
};


//cart

//cart
"use client";
import { useCart } from "@/Context/CartContext";
import Link from "next/link";
import { useState, useEffect } from "react";

const Cart = () => {
  const { cartItems } = useCart();
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    setTimeout(() => {
      setIsLoading(false);
    }, 2000);
  }, []);

  if (cartItems.length === 0 && !isLoading) {
    return (
      <div>
        <h1 className="text-center text-2xl font-bold text-gray-700">
          Your cart is empty.
        </h1>
        <div className="text-center mt-4">
          <Link href="/">
            <div className="bg-blue-500 text-white px-6 py-3 rounded-lg shadow-lg hover:bg-blue-600 transition-colors duration-300 font-bold transform hover:scale-105">
              Back to Home
            </div>
          </Link>
        </div>
      </div>
    );
  }
  const emptyCart = () => {
    localStorage.removeItem("cartItems");
  };

  return (
    <>
      <div className="min-h-screen bg-gradient-to-b from-gray-100 to-gray-900 p-8">
        <h1 className="text-4xl font-extrabold text-center mb-8 text-white bg-gradient-to-r from-gray-400 to-gray-700 p-4 rounded-lg">
          Your Cart
        </h1>
        <div className="space-y-6">
          {isLoading
            ? Array.from({ length: cartItems.length || 3 }).map((_, index) => (
                <div
                  key={index}
                  className="animate-pulse bg-gray-300 h-32 rounded-lg"
                />
              ))
            : cartItems.map((item) => (
                <div
                  key={item._id}
                  className="flex justify-between items-center p-6 bg-white shadow-xl rounded-lg transform transition-transform hover:scale-105"
                >
                  <div className="flex-1">
                    <img
                      src={item.images}
                      className="w-32 h-32 object-cover rounded-lg mr-4"
                    />
                    <h2 className="text-xl font-bold text-gray-700">
                      {item.name} - {item.price}€
                    </h2>
                    <p className="text-gray-600">
                      description:{item.description}
                    </p>
                    <p className="text-gray-600">category: {item.category}</p>
                  </div>
                </div>
              ))}
        </div>
        <div className="mt-8 text-center">
          <Link href="/">
            <div className="bg-white text-gray-700 px-6 py-3 rounded-lg shadow-lg hover:bg-gray-100 transition-colors duration-300 font-bold transform hover:scale-105">
              Back to Home
            </div>
          </Link>
        </div>
        <div className="mt-8 text-center">
          <button
            onClick={emptyCart}
            className="bg-white text-red-600 px-6 py-3 rounded-lg shadow-lg hover:bg-gray-100 transition-colors duration-300 font-bold transform hover:scale-105"
          >
            Empty Cart
          </button>
        </div>
      </div>
    </>
  );
};

export default Cart;

//cartcontext 

"use client";
import {
  createContext,
  ReactNode,
  useContext,
  useState,
  useEffect,
} from "react";
import { Item } from "@/app/page";

interface CartContextProps {
  cartItems: Item[];
  addItemToCart: (item: Item) => void;
  removeItemFromCart: (id: string) => void;
}

const CartContext = createContext<CartContextProps | undefined>(undefined);

export const CartProvider = ({ children }: { children: ReactNode }) => {
  const [cartItems, setCartItems] = useState<Item[]>(() => {
    // Recupera i dati dal localStorage, se esistono
    if (typeof window !== "undefined") {
      const savedCart = localStorage.getItem("cartItems");
      return savedCart ? JSON.parse(savedCart) : [];
    }
    return [];
  });

  useEffect(() => {
    // Aggiorna il localStorage quando il carrello cambia
    localStorage.setItem("cartItems", JSON.stringify(cartItems));
  }, [cartItems]);

  const addItemToCart = async (item: Item) => {
    // Aggiunge l'elemento al carrello
    console.log("Adding item to cart:", item);

    try {
      const response = await fetch("/api/CartProducts", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(item),
      });

      if (!response.ok) {
        throw new Error("Errore durante l'aggiunta al carrello");
      }

      const data = await response.json();
      console.log("Success:", data);

      // Aggiorna lo stato del carrello solo se il POST ha successo
      setCartItems((prevItems) => [...prevItems, data]);
    } catch (error) {
      console.error("Error:", error);
    }
  };

  const removeItemFromCart = (id: string) => {
    setCartItems((prevItems) => prevItems.filter((item) => item._id !== id));
  };

  return (
    <CartContext.Provider
      value={{ cartItems, addItemToCart, removeItemFromCart }}
    >
      {children}
    </CartContext.Provider>
  );
};

// Custom hook per utilizzare il contesto del carrello
export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error("useCart must be used within a CartProvider");
  }
  return context;
};

//cart
"use client";
import React, { useEffect, useState } from "react";
import { ItemCart } from "@/app/page";
import Link from "next/link";

const Cart = () => {
  const [cartItems, setCartItems] = useState<ItemCart[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const fetchCartItems = async () => {
      try {
        const response = await fetch("/api/CartProducts");
        if (!response.ok) {
          throw new Error("Errore nel recupero dei prodotti dal carrello");
        }
        const data = await response.json();
        console.log("Success:", data);
        setCartItems(data);
      } catch (error) {
        console.error("Errore durante il fetch:", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchCartItems();
  }, []);

  const handleRemoveItem = async (_id: string) => {
    try {
      const response = await fetch("/api/CartProducts", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ _id }),
      });

      if (!response.ok) {
        throw new Error(
          "Errore durante la rimozione del prodotto dal carrello"
        );
      }

      setCartItems((prevItems) => prevItems.filter((item) => item._id !== _id));
    } catch (error) {
      console.error("Error:", error);
    }
  };

  return (
    <>
      {cartItems.map((item) => (
        <div
          key={item._id}
          className="flex justify-between items-center p-6 bg-white shadow-xl rounded-lg transform transition-transform hover:scale-105"
        >
          <div className="flex-1">
            <img
              src={item.images}
              className="w-32 h-32 object-cover rounded-lg mr-4"
            />
            <h2 className="text-xl font-bold text-gray-700">
              {item.name} - {item.price}€
            </h2>
            <p className="text-gray-600">Description: {item.description}</p>
            <p className="text-gray-600">Category: {item.category}</p>
            <p className="text-gray-600">Quantity: {item.quantity}</p>
            <p className="text-gray-600">
              Added on: {new Date(item.creationDate).toLocaleDateString()}
            </p>
          </div>
          <button
            className="bg-red-500 text-white px-4 py-2 rounded-lg"
            onClick={() => handleRemoveItem(item._id)}
          >
            Remove
          </button>
        </div>
      ))}
    </>
  );
};
export default Cart;

//backend cart

import { NextResponse } from "next/server";
import connectMongo, { connectMongo2 } from "@/lib/mongodb";
import CartProduct from "@/models/CartProduct";

// Gestisce le richieste POST per aggiungere un prodotto al carrello
export async function POST(request: Request) {
  await connectMongo2();

  try {
    const data = await request.json();
    const { name, description, price, images, category, quantity = 1 } = data;

    // Creiamo un nuovo prodotto con quantità e data di creazione
    const cartProduct = new CartProduct({
      name,
      description,
      price,
      images,
      category,
      quantity,
      creationDate: new Date(), // Imposta la data di creazione
    });

    await cartProduct.save();

    return NextResponse.json(cartProduct, { status: 201 });
  } catch (error) {
    console.error("Errore durante l'aggiunta al carrello:", error);
    return NextResponse.json(
      { error: "Errore durante l'aggiunta al carrello" },
      { status: 500 }
    );
  }
}

// Gestisce le richieste DELETE per rimuovere un prodotto dal carrello
export async function DELETE(request: Request) {
  await connectMongo2();

  try {
    const { _id } = await request.json();
    await CartProduct.deleteOne({ _id });

    return NextResponse.json(
      { message: "Prodotto rimosso dal carrello" },
      { status: 200 }
    );
  } catch (error) {
    console.error("Errore durante la rimozione dal carrello:", error);
    return NextResponse.json(
      { error: "Errore durante la rimozione dal carrello" },
      { status: 500 }
    );
  }
}
