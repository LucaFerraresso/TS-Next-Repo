backup prima di cambiare animazioni e stili.

homapage.tsx ////////////////////////////////////////////////////////////////

"use client";
import { useEffect, useState } from "react";
import Link from "next/link";
import Card from "@/components/Card";
import CartIcon from "@/components/CartIcon";

export interface Item {
  _id: string;
  name: string;
  price: string;
  description: string;
  category: string;
  images: string;
}
export interface ItemCart {
  _id: string;
  name: string;
  price: string;
  images: string;
  description: string;
  category: string;
  quantity: number;
  creationDate: string;
}

export default function Home() {
  const [items, setItems] = useState<Item[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  const fetchItems = async () => {
    try {
      const response = await fetch("/api/fakeEcommerceItems");
      if (!response.ok) {
        throw new Error("Errore nel recupero dei dati");
      }
      const data: Item[] = await response.json();
      setTimeout(() => {
        setItems(data);
        setIsLoading(false);
      }, 2000); // Delay per mostrare lo skeleton
    } catch (error) {
      console.error("Errore durante il fetch:", error);
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchItems();
  }, []);

  return (
    <div className="bg-gradient-to-b from-gray-100 to-gray-900 min-h-screen flex flex-col items-center">
      <header className="w-full p-4 flex justify-end">
        <CartIcon />
      </header>
      <main className="flex flex-col items-center justify-center p-6 w-full max-w-7xl">
        <div className="bg-white shadow-xl p-10 rounded-2xl w-full">
          <h1 className="text-4xl font-extrabold text-center mb-8 bg-gradient-to-r from-gray-400 to-gray-700 p-4 rounded-lg shadow-lg text-transparent bg-clip-text">
            Product List
          </h1>
          <button className="bg-orange-600 text-white px-4 py-2 rounded-xl shadow-md transition-transform duration-300 transform hover:scale-105">
            <Link href="/Cart">Go to Cart</Link>
          </button>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 mt-8">
            {isLoading
              ? Array.from({ length: 6 }).map((_, index) => (
                  <div
                    key={index}
                    className="animate-pulse bg-gray-300 h-64 rounded-lg"
                  />
                ))
              : items.map((item) => (
                  <Card key={item._id} item={item} showDetailsLink={true} />
                ))}
          </div>
        </div>
      </main>
    </div>
  );
}

card.tsx ////////////////////////////////////////////////////////////

"use client";
import Link from "next/link";
import { useCart } from "@/Context/CartContext";
import { useState } from "react";

interface CardProps {
  item: {
    _id: string;
    name: string;
    price: string;
    description: string;
    category: string;
    images: string;
  };
  showDetailsLink?: boolean;
}

const Card = ({ item, showDetailsLink = true }: CardProps) => {
  const { addItemToCart } = useCart();
  const [isClicked, setIsClicked] = useState(false);

  const handleAddToCart = () => {
    setIsClicked(true);
    addItemToCart(item); // Aggiunge il prodotto al carrello tramite API
    setTimeout(() => setIsClicked(false), 300); // Resetta l'animazione dopo 300ms
  };

  return (
    <div
      className={`w-full sm:w-[300px] border border-gray-400 rounded-lg shadow-xl p-6 flex flex-col items-center bg-white 
      ${
        isClicked ? "animate-bounce" : ""
      } transition-transform duration-300 transform hover:scale-105 hover:shadow-2xl`}
    >
      <h2 className="text-2xl font-bold text-gray-700 mb-2">
        Name:{item.name}
      </h2>
      <img
        src={item.images}
        alt={item.name}
        className="w-full h-48 object-cover mb-4"
      />
      <p className="text-xl text-gray-600 mb-4">Price: {item.price} €</p>
      <p className="text-gray-600 mb-6 text-center">
        Description:{item.description}
      </p>
      <p className="text-gray-600 mb-6 text-center">Category:{item.category}</p>
      <div className="space-y-2 w-full">
        <button
          className="bg-orange-600 text-white px-4 py-2 rounded-lg w-full transform transition-transform duration-300 hover:scale-105"
          onClick={handleAddToCart}
        >
          Add Item
        </button>
        {showDetailsLink && (
          <Link href={`/products/${item._id}`}>
            <div className="bg-blue-500 text-white px-4 py-2 rounded-lg border border-blue-500 w-full transform transition-transform duration-300 hover:scale-105">
              More Details
            </div>
          </Link>
        )}
      </div>
    </div>
  );
};

export default Card;

cardaggiornata 1
"use client";
import Link from "next/link";
import { useCart } from "@/Context/CartContext";
import { useState } from "react";
import { toast } from "react-toastify";

interface CardProps {
  item: {
    _id: string;
    name: string;
    price: string;
    description: string;
    category: string;
    images: string;
  };
  showDetailsLink?: boolean;
}

const Card = ({ item, showDetailsLink = true }: CardProps) => {
  const { addItemToCart } = useCart();
  const [isClicked, setIsClicked] = useState(false);

  const handleAddToCart = () => {
    setIsClicked(true);
    addItemToCart(item);
    toast.success("Item added to cart!"); // Mostra il toast
    setTimeout(() => setIsClicked(false), 300);
  };

  return (
    <div
      className={`w-full sm:w-[300px] border border-gray-800 rounded-lg shadow-xl p-6 flex flex-col items-center bg-white 
      ${
        isClicked ? "animate-bounce" : ""
      } transition-transform duration-300 transform hover:scale-105 hover:shadow-2xl`}
    >
      <h2 className="text-2xl font-bold text-gray-700 mb-2">{item.name}</h2>
      <img
        src={item.images}
        alt={item.name}
        className="w-full h-48 object-cover mb-4 rounded-lg"
      />
      <p className="text-xl text-gray-600 mb-4">Price: {item.price} €</p>
      <p className="text-gray-600 mb-6 text-center">{item.description}</p>
      <p className="text-gray-600 mb-6 text-center">
        Category: {item.category}
      </p>
      <div className="space-y-2 w-full">
        <button
          className="bg-orange-600 text-white px-4 py-2 rounded-lg w-full transform transition-transform duration-300 hover:scale-105"
          onClick={handleAddToCart}
        >
          Add Item
        </button>
        {showDetailsLink && (
          <Link href={`/products/${item._id}`}>
            <div className="bg-blue-500 text-white px-4 py-2 rounded-lg border border-blue-500 w-full transform transition-transform duration-300 hover:scale-105">
              More Details
            </div>
          </Link>
        )}
      </div>
    </div>
  );
};

export default Card;

